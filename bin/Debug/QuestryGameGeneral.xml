<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuestryGameGeneral</name>
    </assembly>
    <members>
        <member name="M:QuestryGameGeneral.Calculations.Comparisons.WithinMargin(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the input floats a or b are within the margin of one another.
            </summary>
            <param name="a"> first value</param>
            <param name="b"> second value</param>
            <param name="margin"> the margin by which the two values will be compared.</param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.Calculations.Operations.IntPower(System.Int32,System.Int32)">
            <summary>
            returns a^b for two integers by using Exponentiation by Squaring
            </summary>
            <param name="a"> the integer base </param>
            <param name="b"> the integer exponent </param>
            <returns> a^b. 0 if too big to be stored in an integer. </returns>
        </member>
        <member name="M:QuestryGameGeneral.Calculations.Operations.RoundToSignificantDigits(System.Double,System.Int32)">
            <summary>
            Rounds the given value to the specified number of significant figures/digits.
            </summary>
            <param name="val"> The value to be rounded </param>
            <param name="digits"> the number of significant figures </param>
            <returns> the rounded number </returns>
        </member>
        <member name="M:QuestryGameGeneral.Calculations.VariableCalculations.GetIntMinimumBits(System.Int32)">
            <summary>
            Gets the number of minimum bits required to represent this integer. Of course, all integers take the same space but a lower integer can be represented by
            less bits.
            </summary>
            <param name="number"> the integer </param>
            <returns> the bits required to represent said integer. if negative, will return 32 as negative values require the flag. input the absolute value
            if you wish the minimum bits if the number was not negative to be returned. </returns>
        </member>
        <member name="M:QuestryGameGeneral.Converters.DateConverters.ConvertAmericanToSensible(System.String)">
            <summary>
            Converts the american date system to the one understood by regular human beings.
            </summary>
            <param name="s"> a date of the format "month/day/..." in numerical form</param>
            <returns>the same date of the format "day/month/..."</returns>
        </member>
        <member name="M:QuestryGameGeneral.Converters.ToBinary.IntToBinary(System.Int32)">
            <summary>
            Converts an integer into its binary form.
            </summary>
            <param name="number"> the number to be converted. </param>
            <returns> The LSB is represented by index 0. True is for 1 and false is for 0. </returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredBool">
            <summary>
            A monitored bool class that can be used such that whenever the bool value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.#ctor(System.Boolean)">
            <summary>
            Creates a monitored bool.
            </summary>
            <param name="val">the initial value of the bool.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.SetValue(System.Boolean)">
            <summary>
            Sets the value of the monitored bool, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new bool value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.GetValue">
            <summary>
            Gets the value of the monitored bool.
            </summary>
            <returns>the value of the monitored bool.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredBool})">
            <summary>
            Subscribes the given function to the bool such that the function will be called whenever the bool is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this bool as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredBool})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.ToString">
            <summary>
            returns the string value of the bool.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.Equals(System.Object)">
            <summary>
            performs bool.Equals(object obj) on the base bool value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredBool.GetHashCode">
            <summary>
            returns bool.GetHashCode(), where the bool is the base bool value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredByte">
            <summary>
            A monitored byte class that can be used such that whenever the byte value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.#ctor(System.Byte)">
            <summary>
            Creates a monitored byte.
            </summary>
            <param name="val">the initial value of the byte.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.SetValue(System.Byte)">
            <summary>
            Sets the value of the monitored byte, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new byte value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.GetValue">
            <summary>
            Gets the value of the monitored byte.
            </summary>
            <returns>the value of the monitored byte.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredByte})">
            <summary>
            Subscribes the given function to the byte such that the function will be called whenever the byte is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this byte as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredByte})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.ToString">
            <summary>
            returns the string value of the byte.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.Equals(System.Object)">
            <summary>
            performs byte.Equals(object obj) on the base byte value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredByte.GetHashCode">
            <summary>
            returns byte.GetHashCode(), where the byte is the base byte value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredChar">
            <summary>
            A monitored char class that can be used such that whenever the char value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.#ctor(System.Char)">
            <summary>
            Creates a monitored char.
            </summary>
            <param name="val">the initial value of the char.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.SetValue(System.Char)">
            <summary>
            Sets the value of the monitored char, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new char value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.GetValue">
            <summary>
            Gets the value of the monitored char.
            </summary>
            <returns>the value of the monitored char.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredChar})">
            <summary>
            Subscribes the given function to the char such that the function will be called whenever the char is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this char as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredChar})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.ToString">
            <summary>
            returns the string value of the char.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.Equals(System.Object)">
            <summary>
            performs char.Equals(object obj) on the base char value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredChar.GetHashCode">
            <summary>
            returns char.GetHashCode(), where the char is the base char value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal">
            <summary>
            A monitored decimal class that can be used such that whenever the decimal value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.#ctor(System.Decimal)">
            <summary>
            Creates a monitored decimal.
            </summary>
            <param name="val">the initial value of the decimal.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.SetValue(System.Decimal)">
            <summary>
            Sets the value of the monitored decimal, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new decimal value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.GetValue">
            <summary>
            Gets the value of the monitored decimal.
            </summary>
            <returns>the value of the monitored decimal.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredDecimal})">
            <summary>
            Subscribes the given function to the decimal such that the function will be called whenever the decimal is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this decimal as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredDecimal})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.ToString">
            <summary>
            returns the string value of the decimal.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.Equals(System.Object)">
            <summary>
            performs decimal.Equals(object obj) on the base decimal value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDecimal.GetHashCode">
            <summary>
            returns decimal.GetHashCode(), where the decimal is the base decimal value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredDouble">
            <summary>
            A monitored double class that can be used such that whenever the double value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.#ctor(System.Double)">
            <summary>
            Creates a monitored double.
            </summary>
            <param name="val">the initial value of the double.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.SetValue(System.Double)">
            <summary>
            Sets the value of the monitored double, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new double value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.GetValue">
            <summary>
            Gets the value of the monitored double.
            </summary>
            <returns>the value of the monitored double.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredDouble})">
            <summary>
            Subscribes the given function to the double such that the function will be called whenever the double is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this double as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredDouble})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.ToString">
            <summary>
            returns the string value of the double.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.Equals(System.Object)">
            <summary>
            performs double.Equals(object obj) on the base double value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredDouble.GetHashCode">
            <summary>
            returns double.GetHashCode(), where the double is the base double value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredFloat">
            <summary>
            A monitored float class that can be used such that whenever the float value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.#ctor(System.Single)">
            <summary>
            Creates a monitored float.
            </summary>
            <param name="val">the initial value of the float.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.SetValue(System.Single)">
            <summary>
            Sets the value of the monitored float, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new float value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.GetValue">
            <summary>
            Gets the value of the monitored float.
            </summary>
            <returns>the value of the monitored float.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredFloat})">
            <summary>
            Subscribes the given function to the float such that the function will be called whenever the float is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this float as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredFloat})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.ToString">
            <summary>
            returns the string value of the float.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.Equals(System.Object)">
            <summary>
            performs float.Equals(object obj) on the base float value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredFloat.GetHashCode">
            <summary>
            returns float.GetHashCode(), where the float is the base float value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredInt">
            <summary>
            A monitored int class that can be used such that whenever the int value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.#ctor(System.Int32)">
            <summary>
            Creates a monitored int.
            </summary>
            <param name="val">the initial value of the int.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.SetValue(System.Int32)">
            <summary>
            Sets the value of the monitored int, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new int value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.GetValue">
            <summary>
            Gets the value of the monitored int.
            </summary>
            <returns>the value of the monitored int.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredInt})">
            <summary>
            Subscribes the given function to the int such that the function will be called whenever the int is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this int as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredInt})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.ToString">
            <summary>
            returns the string value of the int.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.Equals(System.Object)">
            <summary>
            performs int.Equals(object obj) on the base int value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredInt.GetHashCode">
            <summary>
            returns int.GetHashCode(), where the int is the base int value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredLong">
            <summary>
            A monitored long class that can be used such that whenever the long value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.#ctor(System.Int64)">
            <summary>
            Creates a monitored long.
            </summary>
            <param name="val">the initial value of the long.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.SetValue(System.Int64)">
            <summary>
            Sets the value of the monitored long, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new long value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.GetValue">
            <summary>
            Gets the value of the monitored long.
            </summary>
            <returns>the value of the monitored long.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredLong})">
            <summary>
            Subscribes the given function to the long such that the function will be called whenever the long is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this long as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredLong})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.ToString">
            <summary>
            returns the string value of the long.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.Equals(System.Object)">
            <summary>
            performs long.Equals(object obj) on the base long value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredLong.GetHashCode">
            <summary>
            returns long.GetHashCode(), where the long is the base long value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredObject">
            <summary>
            A monitored object class that can be used such that whenever the object value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.#ctor(System.Object)">
            <summary>
            Creates a monitored object.
            </summary>
            <param name="val">the initial value of the object.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.SetValue(System.Object)">
            <summary>
            Sets the value of the monitored object, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new object value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.GetValue">
            <summary>
            Gets the value of the monitored object.
            </summary>
            <returns>the value of the monitored object.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredObject})">
            <summary>
            Subscribes the given function to the object such that the function will be called whenever the object is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this object as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredObject})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.ToString">
            <summary>
            returns the object value of the object.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.Equals(System.Object)">
            <summary>
            performs object.Equals(object obj) on the base object value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredObject.GetHashCode">
            <summary>
            returns object.GetHashCode(), where the object is the base object value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte">
            <summary>
            A monitored sbyte class that can be used such that whenever the sbyte value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.#ctor(System.SByte)">
            <summary>
            Creates a monitored sbyte.
            </summary>
            <param name="val">the initial value of the sbyte.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.SetValue(System.SByte)">
            <summary>
            Sets the value of the monitored sbyte, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new sbyte value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.GetValue">
            <summary>
            Gets the value of the monitored sbyte.
            </summary>
            <returns>the value of the monitored sbyte.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredSbyte})">
            <summary>
            Subscribes the given function to the sbyte such that the function will be called whenever the sbyte is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this sbyte as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredSbyte})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.ToString">
            <summary>
            returns the string value of the sbyte.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.Equals(System.Object)">
            <summary>
            performs sbyte.Equals(object obj) on the base sbyte value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredSbyte.GetHashCode">
            <summary>
            returns sbyte.GetHashCode(), where the sbyte is the base sbyte value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredShort">
            <summary>
            A monitored short class that can be used such that whenever the short value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.#ctor(System.Int16)">
            <summary>
            Creates a monitored short.
            </summary>
            <param name="val">the initial value of the short.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.SetValue(System.Int16)">
            <summary>
            Sets the value of the monitored short, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new short value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.GetValue">
            <summary>
            Gets the value of the monitored short.
            </summary>
            <returns>the value of the monitored short.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredShort})">
            <summary>
            Subscribes the given function to the short such that the function will be called whenever the short is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this short as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredShort})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.ToString">
            <summary>
            returns the string value of the short.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.Equals(System.Object)">
            <summary>
            performs short.Equals(object obj) on the base short value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredShort.GetHashCode">
            <summary>
            returns short.GetHashCode(), where the short is the base short value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredString">
            <summary>
            A monitored string class that can be used such that whenever the string value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.#ctor(System.String)">
            <summary>
            Creates a monitored string.
            </summary>
            <param name="val">the initial value of the string.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.SetValue(System.String)">
            <summary>
            Sets the value of the monitored string, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new string value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.GetValue">
            <summary>
            Gets the value of the monitored string.
            </summary>
            <returns>the value of the monitored string.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredString})">
            <summary>
            Subscribes the given function to the string such that the function will be called whenever the string is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this string as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredString})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.ToString">
            <summary>
            returns the string value of the string.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.Equals(System.Object)">
            <summary>
            performs string.Equals(object obj) on the base string value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredString.GetHashCode">
            <summary>
            returns string.GetHashCode(), where the string is the base string value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredUint">
            <summary>
            A monitored uint class that can be used such that whenever the uint value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.#ctor(System.UInt32)">
            <summary>
            Creates a monitored uint.
            </summary>
            <param name="val">the initial value of the uint.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.SetValue(System.UInt32)">
            <summary>
            Sets the value of the monitored uint, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new uint value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.GetValue">
            <summary>
            Gets the value of the monitored uint.
            </summary>
            <returns>the value of the monitored uint.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUint})">
            <summary>
            Subscribes the given function to the uint such that the function will be called whenever the uint is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this uint as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUint})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.ToString">
            <summary>
            returns the string value of the uint.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.Equals(System.Object)">
            <summary>
            performs uint.Equals(object obj) on the base uint value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUint.GetHashCode">
            <summary>
            returns uint.GetHashCode(), where the uint is the base uint value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredUlong">
            <summary>
            A monitored ulong class that can be used such that whenever the ulong value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.#ctor(System.UInt64)">
            <summary>
            Creates a monitored ulong.
            </summary>
            <param name="val">the initial value of the ulong.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.SetValue(System.UInt64)">
            <summary>
            Sets the value of the monitored ulong, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new ulong value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.GetValue">
            <summary>
            Gets the value of the monitored ulong.
            </summary>
            <returns>the value of the monitored ulong.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUlong})">
            <summary>
            Subscribes the given function to the ulong such that the function will be called whenever the ulong is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this ulong as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUlong})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.ToString">
            <summary>
            returns the string value of the ulong.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.Equals(System.Object)">
            <summary>
            performs ulong.Equals(object obj) on the base ulong value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUlong.GetHashCode">
            <summary>
            returns ulong.GetHashCode(), where the ulong is the base ulong value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuestryGameGeneral.MonitoredTypes.MonitoredUshort">
            <summary>
            A monitored ushort class that can be used such that whenever the ushort value changes all the subscribers will be notified.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.#ctor(System.UInt16)">
            <summary>
            Creates a monitored ushort.
            </summary>
            <param name="val">the initial value of the ushort.</param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.Finalize">
            <summary>
            Upon destruction, nullifies all 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.SetValue(System.UInt16)">
            <summary>
            Sets the value of the monitored ushort, notifying subscribed functions if the value is not the same.
            </summary>
            <param name="val"> the new ushort value. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.GetValue">
            <summary>
            Gets the value of the monitored ushort.
            </summary>
            <returns>the value of the monitored ushort.</returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.SubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUshort})">
            <summary>
            Subscribes the given function to the ushort such that the function will be called whenever the ushort is changed.
            </summary>
            <param name="action"> the function to be called that shall accept this ushort as its parameter. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.UnSubscribeValueChange(System.Action{QuestryGameGeneral.MonitoredTypes.MonitoredUshort})">
            <summary>
            Unsubscribes the input function if it was subscribed in the first place.
            </summary>
            <param name="action"> the function to be potentially unsubscribed. </param>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.ToString">
            <summary>
            returns the string value of the ushort.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.Equals(System.Object)">
            <summary>
            performs ushort.Equals(object obj) on the base ushort value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.MonitoredTypes.MonitoredUshort.GetHashCode">
            <summary>
            returns ushort.GetHashCode(), where the ushort is the base ushort value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.AddNode(`0,System.Collections.Generic.List{QuestryGameGeneral.PathFinding.DijkstraMap{`0}.NodeLink})">
            <summary>
            Adds a node and its connections to the map. O(n) where n= size of connectedTo. Also creates nodes for nodes that are already connected to. If a distance is different then changes distance.
            </summary>
            <param name="connectedTo"> Can be left as empty if you want simply the node to be added, and for example, will add the links later.</param>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.AddNodes(System.Collections.Generic.List{`0},System.Collections.Generic.List{System.Collections.Generic.List{QuestryGameGeneral.PathFinding.DijkstraMap{`0}.NodeLink}})">
            <summary>
            A node Object and its list of connections have to be the same index in both lists input. 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.RemoveNode(`0)">
            <summary>
            Removes the node, along with the connections that it harbored.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.AddModifyNodeLink(`0,`0,System.Single,System.Boolean)">
            <summary>
            Adds a link from a node to another or resets distance. If such a link already exists at the same distance or one of the nodes do not exist in the map the operation will fail and will return false.
            if the isModification variable is set to true without being sure that the two nodes exist and already have a connection between them, this will produce an error. 
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.RemoveNodeLink(`0,`0)">
            <summary>
            removes the link between the two specified nodes. if the nodes do not exist returns false, otherwise returns true, even if the connection did not exist in the first place.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.FindPath(`0,`0)">
            <summary>
            if one of the two input objects are not in the map or there is no valid path, will return a null path. Otherwise, will return a path that starts from the first destination to the end goal.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.FindPathButExclude(`0,`0,System.Collections.Generic.List{`0})">
            <summary>
            if one of the two input objects are not in the map or goal is to be excluded or when there is no valid path, will return a null path.
            Otherwise, will return a path that starts from the first destination to the end goal.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.PathFinding.DijkstraMap`1.FindPathButExclude(`0,`0,System.Func{`0,System.Boolean})">
            <summary>
            if one of the two input objects are not in the map or goal is to be excluded or when there is no valid path, will return a null path.
            Otherwise, will return a path that starts from the first destination to the end goal.
            </summary>
        </member>
        <member name="T:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor">
            <summary>
            Executes a given function for every specified interval, unless the time given for one of the functions is not perfectly divided in which scenario the 
            function will be once executed with the remainder. Especially useful for time-sensitive functions. The difference between the precise executor type
            is that this one will not be delayed in starting, meaning that the first execution will happen much faster than the ideal execution interval time, and that
            it is no considered erronous for the executions to happen faster than the ideal time (of course the proper time passed will be input)
            </summary>
        </member>
        <member name="T:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Operation">
            <summary>
            The type used for the Assigner and Disconnectors.
            </summary>
        </member>
        <member name="T:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Execution">
            <summary>
            The type used for Exeuction.
            </summary>
            <param name="time"> Time in milliseconds that has passed since last execution. </param>
        </member>
        <member name="T:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.ErrorHandler">
            <summary>
            The optional type called for when the kernel calls the thread of this object too late for the execution to be called within margin. This function will
            be called before the execution takes place.
            </summary>
            <param name="assigner"> The assigner function used </param>
            <param name="disconnector"> The disconnector function used </param>
            <param name="executor"> The executor function used. </param>
            <param name="time_left"> The time left to be executed before all the intervals of execution were finished. This does not include the current interval.
            </param>
            <param name="current_interval"> The current interval of time before execution was stopped. This does not include the time elapsed after this function 
            is called. </param>
            <returns> Whether the thread should continue as normal to execute. </returns>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.#ctor(System.Int32,System.Boolean,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Instantiates an Interval Executor. 
            </summary>
            <param name="interval"> The interval of time in milliseconds that is waited before the executions will be executed (ideally). </param>     
            <param name="execution_time_included"> Whether the execution time of the execution is to be included in the interval waited between executions. </param>
            <param name="tpriority"> The priority at which the thread enumerating through the entries should be set. </param>
            <param name="reset_queued"> True for when the timers should only be started when the whole object is started through StartExecution(), 
            or false for immediately when the execution is added through AddEntry(). The associator, if defined, will also be called right before when the timer starts. </param>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.#ctor(System.Int32,System.Boolean,System.Threading.ThreadPriority,System.Boolean,System.Int32,QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.ErrorHandler)">
            <summary>
            Instantiates an Interval Executor. 
            </summary>
            <param name="interval"> The interval of time in milliseconds the executions will be executed (ideally). </param>
            <param name="margin"> The margin of error as to how late the methods may be executed. </param>
            <param name="handler"> A custom function to be executed when the error is above the margin. </param>            
            <param name="execution_time_included"> Whether the execution time of the execution is to be included in the interval waited between executions. </param>
            <param name="tpriority"> The priority at which the thread enumerating through the entries should be set. </param>
            <param name="reset_queued"> True for when the timers should only be started when the whole object is started through StartExecution(), 
            or false for immediately when the execution is added through AddEntry(). The associator, if defined, will also be called right before when the timer starts. </param>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.StartExecution">
            <summary>
            Starts the execution of the entries.
            </summary>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.StopExecution(System.Boolean)">
            <summary>
            Stops the execution of the entries. If in the middle of an execution, waits for it to end.
            </summary>
            <param name="ImmediateSuspend"> UNSAFE. Ends the execution thread(s) immediately. This might corrupt data or lead to unpredictable behaviour. 
            Use at your own risk. </param>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.AddEntry(QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Execution,System.Int64)">
            <summary>
            Adds an execution to be run in specified intervals.
            </summary>
            <param name="exec"> The execution. Must take integer value that represents the amount of time that has passed. </param>
            <param name="execution_time"> The amount of total time it is to be executed before it is released. negative if you wish it to never be released. </param>
            <returns> The unique ID representing this execution. Store it if you would like to access the execution later on. </returns>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.AddEntry(QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Execution,QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Operation,System.Int64)">
            <summary>
            Adds an execution to be run in specified intervals.
            </summary>
            <param name="exec"> The execution. Must take integer value that represents the amount of time that has passed. </param>
            <param name="disassociator"> The disassociator. Executed once when the execution's last execution is executed. </param>
            <param name="execution_time"> The amount of total time it is to be executed before it is released. negative if you wish it to never be released. This will
            override any disassociator input. </param>
            <returns> The unique ID representing this execution. Store it if you would like to access the execution later on. </returns>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.AddEntry(QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Operation,QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Execution,QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.Operation,System.Int64)">
            <summary>
            Adds an execution to be run in specified intervals.
            </summary>
            <param name="associator"> The associator. Run in accordance with the ResetQueued Property set when this object was constructed. 
            The associators of a single object should not differ too much in workload, as otherwise there might be some large deviations in the start
            times of the different executions.</param>
            <param name="exec"> The execution. Must take integer value that represents the amount of time that has passed. </param>
            <param name="disassociator"> The disassociator. Executed once when the execution's last execution is executed. </param>
            <param name="execution_time"> The amount of total time it is to be executed before it is released. negative if you wish it to never be released. This will
            override any disassociator input. </param>
            <returns> The unique ID representing this execution. Store it if you would like to access the execution later on. </returns>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.RemoveEntry(System.Int32,System.Boolean)">
            <summary>
            Removes an execution entry based on its ID. If an entry is about to be run the entry may not be removed first.
            </summary>
            <param name="EntryID"> ID of execution to be removed. </param>
            <param name="CallDisAssociator"> Whether the disassociator function should be called. ıf none assigned at the start, this is meaningless. </param>
            <returns> Whether the entry was existant or not. </returns>
        </member>
        <member name="M:QuestryGameGeneral.TimedExecutors.ImpreciseIntervalExecutor.GetExecutionTotalTimeLeft(System.Int32)">
            <summary>
            Returns the total milliseconds of time the specified execution has before it is removed. Meaningless 
            for indefinite executions, as these get immediately revived after they "run out" of time.
            </summary>
            <param name="ExecutionID"> The Unique ID that identifies this execution. </param>
            <returns> The total milliseconds of time the specified execution has before it is removed. returns long.MinValue if wrong ID is supplied </returns>
        </member>
    </members>
</doc>
